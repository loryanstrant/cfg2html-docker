name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container health
        run: |
          # Test that container can start with required environment variables
          echo "Testing container health with required HOSTS environment variable..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            IMAGE_TAG="cfg2html-docker-test"
            docker build -t "$IMAGE_TAG" .
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          fi
          
          # Test container startup with HOSTS variable
          container_id=$(docker run -d -e HOSTS="dummy:22:user:pass" -e RUN_AT_STARTUP="false" "$IMAGE_TAG")
          sleep 10
          
          # Check if container initialized properly
          if docker logs "$container_id" 2>&1 | grep -q "Container started successfully"; then
            echo "✅ Container health check passed"
          else
            echo "❌ Container health check failed"
            echo "Container logs:"
            docker logs "$container_id" 2>&1
            docker stop "$container_id" || true
            docker rm "$container_id" || true
            exit 1
          fi
          
          # Cleanup
          docker stop "$container_id" || true
          docker rm "$container_id" || true

      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          # Run comprehensive test suite
          ./test.sh
          
          # Additional integration test - verify container can run with proper environment
          echo "Running additional integration test..."
          docker build -t test-image .
          container_id=$(docker run -d -e HOSTS="dummy:22:user:pass" -e RUN_AT_STARTUP="false" test-image)
          sleep 5
          if docker logs "$container_id" 2>&1 | grep -q "Container started successfully"; then
            echo "✅ Integration test passed - container starts and initializes properly"
          else
            echo "❌ Integration test failed - container did not initialize properly"
            docker logs "$container_id" 2>&1
            docker stop "$container_id" || true
            docker rm "$container_id" || true
            exit 1
          fi
          docker stop "$container_id" || true
          docker rm "$container_id" || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'