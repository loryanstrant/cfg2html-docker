name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Determine the image tag to test
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, build locally and test
            echo "Building test image for PR..."
            docker build -t test-image .
            IMAGE_TAG="test-image"
          else
            # For push events, use the built and pushed image
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
            echo "Testing pushed image: $IMAGE_TAG"
          fi
          
          # Run the comprehensive test suite (modified for CI)
          echo "Running comprehensive test suite..."
          
          # Test 1: Basic build and cfg2html availability
          echo "Test 1: cfg2html installation test..."
          if docker run --rm --entrypoint="" $IMAGE_TAG which cfg2html > /dev/null; then
            echo "✅ cfg2html is installed"
          else
            echo "❌ cfg2html not found"
            exit 1
          fi

          # Test 2: Required tools test
          echo "Test 2: Required tools test..."
          tools_missing=0
          for tool in ssh sshpass cron su; do
            if ! docker run --rm --entrypoint="" $IMAGE_TAG which $tool > /dev/null 2>&1; then
              echo "❌ $tool not found"
              tools_missing=1
            fi
          done
          
          if [ $tools_missing -eq 0 ]; then
            echo "✅ All required tools are available"
          else
            exit 1
          fi

          # Test 3: Environment validation
          echo "Test 3: Environment validation test..."
          if docker run --rm $IMAGE_TAG timeout 5 /app/scripts/entrypoint.sh 2>&1 | grep -q "HOSTS environment variable is required"; then
            echo "✅ Environment validation works"
          else
            echo "❌ Environment validation failed"
            exit 1
          fi

          # Test 4: Script permissions
          echo "Test 4: Script permissions test..."
          scripts_ok=0
          for script in entrypoint.sh run-cfg2html.sh setup-cron.sh; do
            if docker run --rm --entrypoint="" $IMAGE_TAG test -x /app/scripts/$script; then
              scripts_ok=$((scripts_ok + 1))
            else
              echo "❌ $script is not executable"
            fi
          done
          
          if [ $scripts_ok -eq 3 ]; then
            echo "✅ All scripts have proper permissions"
          else
            exit 1
          fi

          # Test 5: Container health and startup
          echo "Test 5: Container health check..."
          docker run --name health-test -d \
            -e HOSTS="127.0.0.1" \
            -e RUN_AT_STARTUP="false" \
            -e LOG_LEVEL="DEBUG" \
            $IMAGE_TAG
          
          # Wait for container to initialize
          sleep 5
          
          # Check if container is running
          if docker ps | grep -q health-test; then
            echo "✅ Container health check passed"
          else
            echo "❌ Container health check failed"
            docker logs health-test
            docker stop health-test 2>/dev/null || true
            docker rm health-test 2>/dev/null || true
            exit 1
          fi
          
          # Cleanup
          docker stop health-test
          docker rm health-test
          
          echo ""
          echo "🎉 All tests passed! cfg2html-docker is ready for use."

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  multi-arch-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test multi-platform image
        run: |
          PLATFORM="${{ matrix.platform }}"
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          
          echo "Testing platform: $PLATFORM"
          
          # Pull the specific platform image
          docker pull --platform=$PLATFORM $IMAGE_REF
          
          # Basic functionality test
          docker run --rm --platform=$PLATFORM --entrypoint="" $IMAGE_REF which cfg2html
          
          echo "✅ $PLATFORM image works correctly"